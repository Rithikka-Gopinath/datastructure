int minCostConnectPoints(int** points, int pointsSize, int* pointsColSize){
    if (pointsSize < 2){
        return 0;
    }
    int* distance = malloc(sizeof(int)*pointsSize); //The distance from this "group" to each point
    bool* find = calloc(pointsSize, sizeof(bool)); //Whether this point has joined the "group"
    
    int next,to_point_i;
    int ans = INT_MAX;
    
    //First we take point 0 as the starting point, it is the first member of the group
    find[0] = true;
    int member_count = 1;
    
    /*
    Find the distance of a group to other points.
    Find the shortest one and add this point to the group
    */
    for (int i = 1 ; i < pointsSize ; i++){
        distance[i] = abs(points[0][0]-points[i][0])+abs(points[0][1]-points[i][1]);
        if (ans > distance[i]){
            ans = distance[i];
            next = i;
        }
    }
    
    
    find[next] = true; //next is our new member
    member_count++;    //One more member

    //We'll keep looking for other members until we've found them all
    while (member_count < pointsSize){
        
        int min = INT_MAX;
        int copy;
        
        //Calculate whether the new added point(next) can provide a shorter distance to other points
        for (int i = 0 ; i < pointsSize ; i++){
            
            //Only not joined the group need to take the measurement
            if(find[i] == false){ 
                to_point_i = abs(points[next][0]-points[i][0])+abs(points[next][1]-points[i][1]);
                
                //If possible, update the original distance
                if (distance[i] > to_point_i){
                    distance[i] = to_point_i;
                }
                
                //Also find the point closest to the group, find next member
                if (min > distance[i]){
                    min = distance[i];
                    copy = i;
                }
            }
        }
        ans += min; //In this case, the shortest distance will be found every time.
        next = copy; //Update next
        find[next] = true; //Mark next has joined the group
        member_count++; //One more member
    }
    
    //free memory
    free(distance); 
    free(find);
    
    return ans;
}
