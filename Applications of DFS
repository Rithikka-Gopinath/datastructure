#include <stdio.h>
#include <stdbool.h>

#define MAX 100

int time = 0;

void dfs(int u, int parent, int disc[], int low[], bool visited[], int graph[MAX][MAX], int n) {
    static bool ap[MAX] = { false };

    visited[u] = true;
    disc[u] = low[u] = ++time;
    int children = 0;

    for (int v = 0; v < n; v++) {
        if (graph[u][v]) {
            if (!visited[v]) {
                children++;
                dfs(v, u, disc, low, visited, graph, n);

                low[u] = (low[u] < low[v]) ? low[u] : low[v];

                if (parent == -1 && children > 1) ap[u] = true;
                if (parent != -1 && low[v] >= disc[u]) ap[u] = true;
            } else if (v != parent) {
                low[u] = (low[u] < disc[v]) ? low[u] : disc[v];
            }
        }
    }
}

void findArticulationPoints(int graph[MAX][MAX], int n) {
    int disc[MAX], low[MAX];
    bool visited[MAX] = { false };

    for (int i = 0; i < n; i++) {
        if (!visited[i]) dfs(i, -1, disc, low, visited, graph, n);
    }
}

int main() {
    int n, graph[MAX][MAX];
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    findArticulationPoints(graph, n);

    return 0;
}
