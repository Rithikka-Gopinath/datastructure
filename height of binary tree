#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        return NULL;
    }
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}
int findMin(Node* root, int* found) {
    if (root == NULL) {
        *found = 0;
        return INT_MAX;
    }
    *found = 1;
    int min = root->data;
    int leftMin, rightMin;
    int leftFound, rightFound;
    leftMin = findMin(root->left, &leftFound);
    rightMin = findMin(root->right, &rightFound);
    if (leftFound && leftMin < min) min = leftMin;
    if (rightFound && rightMin < min) min = rightMin;
    return min;
}
int findMax(Node* root, int* found) {
    if (root == NULL) {
        *found = 0;
        return INT_MIN;
    }
    *found = 1;
    int max = root->data;
    int leftMax, rightMax;
    int leftFound, rightFound;
    leftMax = findMax(root->left, &leftFound);
    rightMax = findMax(root->right, &rightFound);
    if (leftFound && leftMax > max) max = leftMax;
    if (rightFound && rightMax > max) max = rightMax;
    return max;
}
int main() {
    Node* root = createNode(5);
    if (root == NULL) return 1;
    root->left = createNode(3);
    root->right = createNode(7);
    root->left->left = createNode(2);
    root->left->right = createNode(9);
    root->right->left = createNode(6);
    root->right->right = createNode(8);

    int minFound, maxFound;
    int min = findMin(root, &minFound);
    int max = findMax(root, &maxFound);

    if (minFound && maxFound) {
        printf("Minimum value: %d\n", min);
        printf("Maximum value: %d\n", max);
    } else {
        printf("Tree is empty\n");
    }

    return 0;
}
